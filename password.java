package watermarking;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class password extends javax.swing.JFrame {

    private File f1;
    private File f2;
    private File f3;
    private File f4;
    private String msg;
    private String pass;
    private int comp;
    private File f5;
    private int i;

    /** Creates new form password */
    public password() {
        initComponents();
    }

    password(File f1, File f2, String msg, File f3) {
        this.f1 = f1;
        this.f2 = f2;
        this.msg = msg;
        this.f3 = f3;
        initComponents();
    }

    public void copy(File f2, File f4) throws FileNotFoundException, IOException {
        InputStream in = new FileInputStream(f2);
        OutputStream out = new FileOutputStream(f4);
        int len;
        byte[] b = new byte[1024];

        while ((len = in.read(b)) > 0) {
            out.write(b, 0, len);
        }
        in.close();
        out.close();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pwdpanel1 = new javax.swing.JPanel();
        pwdcheck1 = new javax.swing.JCheckBox();
        pwdlabel1 = new javax.swing.JLabel();
        pwdfield1 = new javax.swing.JPasswordField();
        pwdlabel2 = new javax.swing.JLabel();
        pwdfield2 = new javax.swing.JPasswordField();
        pwdpanel2 = new javax.swing.JPanel();
        pwdcheck2 = new javax.swing.JCheckBox();
        pwdslider = new javax.swing.JSlider();
        pwdlabel3 = new javax.swing.JLabel();
        pwdembed = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("settings");
        getContentPane().setLayout(null);

        pwdpanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 12), new java.awt.Color(51, 51, 51)));
        pwdpanel1.setEnabled(false);
        pwdpanel1.setLayout(null);

        pwdcheck1.setText("Do you want to set password ?");
        pwdcheck1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdcheck1ActionPerformed(evt);
            }
        });
        pwdpanel1.add(pwdcheck1);
        pwdcheck1.setBounds(10, 10, 210, 23);

        pwdlabel1.setText("Create password");
        pwdlabel1.setEnabled(false);
        pwdpanel1.add(pwdlabel1);
        pwdlabel1.setBounds(50, 50, 130, 14);

        pwdfield1.setEnabled(false);
        pwdfield1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pwdfield1FocusLost(evt);
            }
        });
        pwdpanel1.add(pwdfield1);
        pwdfield1.setBounds(200, 50, 120, 20);

        pwdlabel2.setText("Confirm password");
        pwdlabel2.setEnabled(false);
        pwdpanel1.add(pwdlabel2);
        pwdlabel2.setBounds(50, 100, 130, 14);

        pwdfield2.setEnabled(false);
        pwdpanel1.add(pwdfield2);
        pwdfield2.setBounds(200, 100, 120, 20);

        getContentPane().add(pwdpanel1);
        pwdpanel1.setBounds(20, 20, 350, 140);

        pwdpanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pwdpanel2.setLayout(null);

        pwdcheck2.setText("Compression");
        pwdcheck2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdcheck2ActionPerformed(evt);
            }
        });
        pwdpanel2.add(pwdcheck2);
        pwdcheck2.setBounds(10, 10, 120, 23);

        pwdslider.setMajorTickSpacing(1);
        pwdslider.setMaximum(9);
        pwdslider.setPaintLabels(true);
        pwdslider.setPaintTicks(true);
        pwdslider.setValue(0);
        pwdslider.setEnabled(false);
        pwdpanel2.add(pwdslider);
        pwdslider.setBounds(140, 70, 200, 47);

        pwdlabel3.setText("Compression rate");
        pwdlabel3.setEnabled(false);
        pwdpanel2.add(pwdlabel3);
        pwdlabel3.setBounds(10, 70, 120, 30);

        getContentPane().add(pwdpanel2);
        pwdpanel2.setBounds(20, 180, 350, 130);

        pwdembed.setText("Embed");
        pwdembed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwdembedActionPerformed(evt);
            }
        });
        getContentPane().add(pwdembed);
        pwdembed.setBounds(400, 310, 90, 23);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-526)/2, (screenSize.height-398)/2, 526, 398);
    }// </editor-fold>//GEN-END:initComponents
    private void pwdcheck1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdcheck1ActionPerformed
          if(pwdcheck1.isSelected()==true)
          {//GEN-LAST:event_pwdcheck1ActionPerformed
            pwdlabel1.setEnabled(true);
            pwdlabel2.setEnabled(true);
            pwdpanel1.setEnabled(true);
            pwdfield1.setEnabled(true);
            pwdfield2.setEnabled(true);
        }
          else{
            pwdlabel1.setEnabled(false);
            pwdlabel2.setEnabled(false);
            pwdpanel1.setEnabled(false);
            pwdfield1.setEnabled(false);
            pwdfield2.setEnabled(false);
            pwdfield1.setText("");
            pwdfield2.setText("");
        }  
             
           
    }

    private void pwdcheck2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdcheck2ActionPerformed
        if (pwdcheck2.isSelected() == true) {
            pwdlabel3.setEnabled(true);
            pwdpanel2.setEnabled(true);
            pwdslider.setEnabled(true);

        } else {
            pwdlabel3.setEnabled(false);
            pwdpanel2.setEnabled(false);
            pwdslider.setEnabled(false);
            pwdslider.setValue(0);
        }
    }//GEN-LAST:event_pwdcheck2ActionPerformed

    private void pwdembedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwdembedActionPerformed
       try {
           pass = null;
        comp = 0;
        if (pwdcheck1.isSelected()) {
            if (new String(pwdfield1.getPassword()).equals(new String(pwdfield2.getPassword()))) {
                pass = new String(pwdfield1.getPassword());
            } else {
                JOptionPane.showMessageDialog(this, "password mismatch");
                pwdfield1.setText("");
                pwdfield2.setText("");
                return;
               
               
            }
          
        }
        if (pwdcheck2.isSelected()) {
            comp = pwdslider.getValue();
        }
      
            setVisible(false);
              if (msg != null) {
            watermark.embeddingmsg(f1, f2, msg, pass, comp);
            JOptionPane.showMessageDialog(this, "Message Embedded successfully in the file'" + f2.getName() + 
                 "\nfile path :"+f2.getAbsolutePath());   
                    
              }
            else {
            watermark.embeddingfile(f1, f2, f3, pass, comp);
            setVisible(false);
            JOptionPane.showMessageDialog(this, "File Embedded successfully in the file'" + 
                    f2.getName() + "\nfile path :"+f2.getAbsolutePath());
            } 
         
                          
                        
            new select().setVisible(true);              
             
            
        
    

    
        
            }catch(Exception e){
      JOptionPane.showMessageDialog(null, "unexpected size of input file", 
              "error", JOptionPane.ERROR_MESSAGE);}   
}//GEN-LAST:event_pwdembedActionPerformed

    private void pwdfield1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pwdfield1FocusLost
        if (new String(pwdfield1.getPassword()).length() < 8) {
            JOptionPane.showMessageDialog(this, "enter minimum 8 characters");
            pwdfield1.setText("");

        }
    }//GEN-LAST:event_pwdfield1FocusLost
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new password().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox pwdcheck1;
    private javax.swing.JCheckBox pwdcheck2;
    private javax.swing.JButton pwdembed;
    private javax.swing.JPasswordField pwdfield1;
    private javax.swing.JPasswordField pwdfield2;
    private javax.swing.JLabel pwdlabel1;
    private javax.swing.JLabel pwdlabel2;
    private javax.swing.JLabel pwdlabel3;
    private javax.swing.JPanel pwdpanel1;
    private javax.swing.JPanel pwdpanel2;
    private javax.swing.JSlider pwdslider;
    // End of variables declaration//GEN-END:variables
    
}
